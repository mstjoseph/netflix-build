{"version":3,"sources":["axios.js","Requests.js","Banner.js","Nav.js","Row.js","screens/HomeScreen.js","firebase.js","screens/SignupScreen.js","screens/LoginScreen.js","features/userSlice.js","screens/ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","string","n","useState","movie","setMovie","useEffect","a","get","request","data","results","Math","floor","random","length","fetchData","console","log","className","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Nav","show","handleShow","history","useHistory","transitionNavBar","window","scrolly","addEventListener","removeEventListener","onClick","push","src","alt","Row","fetchUrl","isLargeRow","movies","setMovies","map","poster_path","id","HomeScreen","auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","SignupScreen","emailRef","useRef","passwordRef","ref","placeholder","type","e","preventDefault","signInWithEmailAndPassword","current","value","then","authUser","catch","error","alert","message","createUserWithEmailAndPassword","LoginScreen","signIn","setSignIn","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","ProfileScreen","useSelector","email","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","uid","path","exact","configureStore","reducer","userReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.51d79d78.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\"\n})\n\nexport default instance;","//Typically we would store in {process.env.API_KEY}\nconst API_KEY = \"0950b98fc4434e461107b56a679f7736\";\n\nconst requests = {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\n\nexport default requests;","import React, { useState, useEffect } from 'react';\nimport './Banner.css';\nimport axios from './axios';\nimport requests from './Requests';\n\nfunction Banner() {\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length -1)\n        ]\n      );\n      return request;\n    }\n\n    fetchData();\n  }, []);\n\n  console.log(movie)\n\n    function truncate(string, n) {\n        return string?.length > n ? string.substr(0, n - 1) + '...' : string;\n    }\n\n\n  return (\n    <header className='banner' style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n        backgroundPosition: \"center\",\n    }}\n    >\n      \n      <div className=\"banner__contents\">\n          <h1 className=\"banner__title\">{movie?.title || movie?.name || movie?.original_name}</h1>\n          <div className=\"banner__buttons\">\n              <button className=\"banner__button\">Play</button>\n              <button className=\"banner__button\">My List</button>\n          </div>\n          <div>\n              <h1 className='banner__description'>\n                 {truncate(movie?.overview, 150)} \n                </h1>\n          </div>\n\n          <div className=\"banner__fadeBottom\" />\n        </div>\n    \n    </header>\n  );\n}\n\nexport default Banner;\n","import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport './Nav.css';\n\nfunction Nav() {\n    const [show, handleShow] = useState(false);\n    const history = useHistory()\n\n    const transitionNavBar = () => {\n        if (window.scrolly > 100) {\n            handleShow(true);\n        } else {\n            handleShow(false)\n        }\n    }\n\n    useEffect(() => {\n        window.addEventListener(\"scroll\", transitionNavBar);\n        return () => window.removeEventListener(\"scroll\", transitionNavBar)\n    }, []);\n\n\n  return (\n    <div className={`nav ${show && 'nav__black'}`}>\n        <div className='nav__contents'>\n        <img \n          onClick={() => history.push('/')}\n          className='nav__logo'\n          src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" \n          alt=\"\"\n        />\n        <img \n          onClick={() => history.push('/profile')}\n          className='nav__avatar'\n          src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\" \n          alt=\"\" \n        />\n        </div>\n    </div>\n  );\n}\n\nexport default Nav;\n","import React, { useEffect, useState } from 'react';\nimport axios from './axios';\nimport './Row.css';\n\nfunction Row({ title, fetchUrl, isLargeRow = false }) {\n    const [movies, setMovies] = useState([]);\n\n    const base_url = \"https://image.tmdb.org/t/p/original/\";\n\n    useEffect(() => {\n      async function fetchData() {\n          const request = await axios.get(fetchUrl);\n          setMovies(request.data.results)\n          return request;\n      }\n\n      fetchData()\n    }, [fetchUrl]);\n\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n\n      <div className=\"row__posters\">\n      {movies.map(\n          (movie) => \n            ((isLargeRow && movie.poster_path) ||\n            (!isLargeRow && movie.backdrop_path)) && ( \n                <img \n                className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                key={movie.id}\n                src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name} \n                />\n            \n            ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Row;\n","import React from 'react';\nimport Banner from '../Banner';\nimport './HomeScreen.css';\nimport Nav from '../Nav';\nimport requests from '../Requests';\nimport Row from '../Row';\n\nfunction HomeScreen() {\n  return (\n    <div className=\"homeScreen\">\n       <Nav />\n\n       <Banner />\n      \n\n      <Row\n         title='NETFLIX ORIGINALS'\n         fetchUrl={requests.fetchNetflixOriginals}\n         isLargeRow\n       />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated}/>\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default HomeScreen;\n","import firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDCF9mew4hGK3ZRvYvx8MJbjWD4vvdDvsA\",\n    authDomain: \"netflix-build-12e80.firebaseapp.com\",\n    projectId: \"netflix-build-12e80\",\n    storageBucket: \"netflix-build-12e80.appspot.com\",\n    messagingSenderId: \"210696537414\",\n    appId: \"1:210696537414:web:05a41385844a6f8a869147\"\n  };\n\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\n  const db = firebaseApp.firestore();\n  const auth = firebase.auth();\n\n  export { auth }\n  export default db;","import React, { useRef }from 'react';\nimport { auth } from '../firebase';\nimport './SignupScreen.css';\n\nfunction SignupScreen() {\n    const emailRef = useRef(null);\n    const passwordRef = useRef(null);\n\n    const register = (e) => {\n        e.preventDefault();\n\n        auth.createUserWithEmailAndPassword(\n            emailRef.current.value,\n            passwordRef.current.value\n        )\n        .then((authUser) => {\n            console.log(authUser);\n        })\n        .catch((error) => {\n            alert(error.message);\n        });\n        \n    };\n\n    const signIn = (e) => {\n        e.preventDefault();\n\n        auth.signInWithEmailAndPassword(\n            emailRef.current.value,\n            passwordRef.current.value\n        )\n        .then((authUser) => {\n            console.log(authUser);\n        })\n        .catch((error) => alert(error.message));\n    };\n\n\n  return (\n    <div className='signupScreen'>\n      <form>\n          <h1>Sign In</h1>\n          <input ref={emailRef} placeholder='Email' type='email' />\n          <input ref={passwordRef} placeholder='Password' type='password' />\n          <button type='submit' onClick={signIn}>Sign In</button>\n\n          <h4>\n              <span className='signupScreen__gray'>New to Netflix? </span>\n              <span className='signupScreen__link' onClick={register}>Sign Up now.</span>\n           </h4>\n      </form>\n    </div>\n  );\n}\n\nexport default SignupScreen;\n\n","import React, { useState } from 'react';\nimport './LoginScreen.css';\nimport SignupScreen from './SignupScreen';\n\nfunction LoginScreen() {\n  const [signIn, setSignIn] = useState(false);\n\n\n\n  return (\n    <div className=\"loginScreen\">\n      <div className=\"loginScreen__background\">\n          <img \n          className=\"loginScreen__logo\"\n          src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" alt=\"\" />\n          <button onClick={() => setSignIn(true)}\n          className=\"loginScreen__button\">Sign In</button>\n          <div className='loginScreen__gradient' />\n      </div>\n\n      <div className=\"loginScreen__body\">\n        {signIn ? (\n          <SignupScreen />\n        ): (\n          <>\n          <h1>Unlimited films, TV programmes and more. </h1>\n          <h2>Watch anywhere. Cancel at any time</h2>\n          <h3>Ready to watch? Enter your email to\n              create or restart your \n              membership.\n          </h3>\n  \n          <div className=\"loginScreen__input\">\n            <form>\n              <input type='email' placeholder='Email Address'/>\n              <button onClick={() => setSignIn(true)}\n              className=\"loginScreen__getStarted\">GET STARTED</button>\n            </form>\n          </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default LoginScreen;\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectUser } from '../features/userSlice';\nimport { auth } from '../firebase';\nimport Nav from'../Nav';\nimport './ProfileScreen.css';\n\nfunction ProfileScreen() {\n  const user =useSelector(selectUser);\n\n\n  return (\n    <div className='profileScreen'> \n      <Nav />\n      <div className='profileScreen__body'>\n        <h1>Edit Profile</h1>\n        <div className='profileScreen__info'>\n          <img \n          src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\" \n          alt=\"\" \n          />\n          <div className=\"profileScreen__details\">\n            <h2>{user.email}</h2>\n            <div className='profileScreen__plans'>\n              <h3>Plans</h3>\n              <button \n              onClick={() => auth.signOut()}\n              className='profileScreen__signOut'>Sign Out</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ProfileScreen;\n","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport HomeScreen from './screens/HomeScreen';\r\nimport { BrowserRouter as Router, Switch, Route, } from \"react-router-dom\";\r\nimport LoginScreen from './screens/LoginScreen';\r\nimport { auth } from './firebase';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { logout, login, selectUser } from './features/userSlice';\r\nimport ProfileScreen from './screens/ProfileScreen';\r\n\r\n\r\nfunction App() {\r\n  const user = useSelector(selectUser);\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\r\n      if (userAuth) {\r\n        //Logged in\r\n        dispatch(login({\r\n          uid: userAuth.uid,\r\n          email: userAuth.email\r\n        }))\r\n      } else {\r\n        //Logged out\r\n        dispatch(logout())\r\n      }\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Router>\r\n        {!user ? (\r\n          <LoginScreen />\r\n        ): (\r\n        <Switch>\r\n          <Route path='/profile'>\r\n            <ProfileScreen />\r\n          </Route>\r\n          <Route exact path=\"/\">\r\n            <HomeScreen />\r\n          </Route>\r\n        </Switch>\r\n          )}\r\n    </Router>\r\n   </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}